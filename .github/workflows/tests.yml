name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: attendance_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        php-version: [8.3]
        node-version: [20]

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_pgsql, redis
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Install NPM dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Copy environment file
      run: cp .env.example .env.testing

    - name: Generate application key
      run: php artisan key:generate --env=testing

    - name: Configure test environment
      run: |
        echo "DB_CONNECTION=pgsql" >> .env.testing
        echo "DB_HOST=127.0.0.1" >> .env.testing
        echo "DB_PORT=5432" >> .env.testing
        echo "DB_DATABASE=attendance_test" >> .env.testing
        echo "DB_USERNAME=postgres" >> .env.testing
        echo "DB_PASSWORD=postgres" >> .env.testing
        echo "REDIS_HOST=127.0.0.1" >> .env.testing
        echo "REDIS_PORT=6379" >> .env.testing
        echo "CACHE_DRIVER=redis" >> .env.testing
        echo "SESSION_DRIVER=redis" >> .env.testing
        echo "QUEUE_CONNECTION=redis" >> .env.testing

    - name: Clear config cache
      run: php artisan config:clear

    - name: Run database migrations
      run: php artisan migrate --env=testing --force

    - name: Seed database
      run: php artisan db:seed --env=testing --force

    - name: Run PHP CS Fixer (dry run)
      run: vendor/bin/php-cs-fixer fix --dry-run --diff --verbose

    - name: Run PHPStan
      run: vendor/bin/phpstan analyse --memory-limit=2G

    - name: Run Unit Tests
      run: php artisan test --testsuite=Unit --coverage --coverage-clover=coverage-unit.xml

    - name: Run Feature Tests
      run: php artisan test --testsuite=Feature --coverage --coverage-clover=coverage-feature.xml

    - name: Run Performance Tests
      run: |
        php artisan test --filter=Performance
        php artisan performance:report --format=json > performance-report.json

    - name: Upload test coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage-unit.xml,./coverage-feature.xml
        flags: tests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: test-results
        path: |
          storage/logs/
          build/
          performance-report.json

    - name: Archive coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage-unit.xml
          coverage-feature.xml
          build/coverage/

  quality:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: mbstring, xml, ctype, iconv, intl

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Run Psalm
      run: vendor/bin/psalm --output-format=github

    - name: Run Security Audit
      run: composer audit

    - name: Check for outdated packages
      run: composer outdated --direct

  browser-tests:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-progress --no-interaction
        npm ci

    - name: Build assets
      run: npm run build

    - name: Setup Dusk environment
      run: |
        cp .env.example .env.dusk.local
        php artisan key:generate --env=dusk.local
        php artisan dusk:install

    - name: Start Chrome driver
      run: php artisan dusk:chrome-driver

    - name: Run Laravel Dusk tests
      run: php artisan dusk --env=dusk.local

    - name: Archive Dusk screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: dusk-screenshots
        path: tests/Browser/screenshots/